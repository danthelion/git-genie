[
  {
    "command": "git rebase -i HEAD~5 --autosquash -m \"legacy code\"",
    "explanation": "git rebase -> Forward-port local commits to the updated upstream head\n\n-i, --interactive -> Make a list of the commits which are about to be rebased. Let the user edit that list before rebasing.\n\n --autosquash -> Automatically move commits that begin with squash!/fixup! to the beginning of the todo list.\n -m, --merge -> Use the given message as the merge commit message. If multiple -m options are given, their values are concatenated as separate paragraphs.\n\nHEAD~5 -> The last 5 commits\n\nlegacy code -> The message of the merge commit"
  },
  {
    "command": "git push origin master --force-with-lease",
    "explanation": "git push -> Update remote refs along with associated objects\n\norigin -> The remote repository\n\nmaster -> The branch to push\n\n--force-with-lease -> If the remote branch is not an ancestor of the local branch, refuse to push. This can be used to prevent the remote branch from being overwritten."
  },
  {
    "command": "git log --since=1.week --name-only --oneline -- test.json | grep test.json | wc -l",
    "explanation": "git log -> Show commit logs\n\n--since=1.week -> Show commits more recent than a specific date\n\n--name-only -> Show only names of changed files\n\n--oneline -> Show only the first line of each commit message\n\n-- test.json -> Only commits that affect test.json\n\n| -> Pipe the output of the previous command to the next command\n\ngrep test.json -> Only show lines that contain test.json\n\nwc -l -> Count the number of lines"
  }
]
